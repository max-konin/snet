require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe JobsController do

  # This should return the minimal set of attributes required to create a valid
  # @job. As you add validations to @job, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "name" => "MyString", 'description' => 'desc'} }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # @jobsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before(:each) do
    @user = FactoryGirl.create(:user)
    sign_in  @user
    @job = @user.jobs.create! valid_attributes
  end

  describe "GET index" do
    it "assigns all jobs as @jobs" do
      get :index, {}, valid_session
      assigns(:jobs).should eq([@job])
    end
    
    it 'cannot see other users jobs' do
      other_job = FactoryGirl.create(:user).jobs.create valid_attributes
      get :index, {}
      assigns(:jobs).should eq([@job])
    end
  end

  describe "GET show" do
    it "assigns the requested job as @job" do
      get :show, {id: @job.to_param}
      assigns(:job).should eq(@job)
    end

    it 'can see only my job' do
      other_job = FactoryGirl.create(:user).jobs.create valid_attributes
      expect { get :show, {id: other_job.to_param} }.to raise_error(CanCan::AccessDenied)
    end
  end

  describe "GET new" do
    it "assigns a new @job as @@job" do
      get :new
      assigns(:job).should be_a_new(Job)
    end
  end

  describe "GET edit" do
    it "assigns the requested job as @job" do
      get :edit, {id: @job.to_param}
      assigns(:job).should eq(@job)
    end

    it 'can edit only my job' do
      other_job = FactoryGirl.create(:user).jobs.create valid_attributes
      expect { get :edit, {id: other_job.to_param} }.to raise_error(CanCan::AccessDenied)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new @job" do
        expect {
          post :create, {job: valid_attributes}
        }.to change(Job, :count).by(1)
      end

      it "assigns a newly created @job as @@job" do
        post :create, {job: valid_attributes}
        assigns(:job).should be_a(Job)
        assigns(:job).should be_persisted
      end

      it "redirects to the created @job" do
        post :create, {job: valid_attributes}
        response.should redirect_to(Job.last)
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested @job" do
        Job.any_instance.should_receive(:update).with({ "name" => "MyString" })
        put :update, {:id => @job.to_param, :job => { "name" => "MyString" }}, valid_session
      end

      it "assigns the requested @job as @@job" do
        put :update, {:id => @job.to_param, :job => valid_attributes}, valid_session
        assigns(:job).should eq(@job)
      end

      it 'can update only my job' do
        other_job = FactoryGirl.create(:user).jobs.create valid_attributes
        expect { get :update, {id: other_job.to_param} }.to raise_error(CanCan::AccessDenied)
      end

      it "redirects to the @job" do
        put :update, {:id => @job.to_param, :job => valid_attributes}, valid_session
        response.should redirect_to(@job)
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested @job" do
      expect {
        delete :destroy, {id: @job.to_param}, valid_session
      }.to change(Job, :count).by(-1)
    end

    it 'can destroy only my job' do
      other_job = FactoryGirl.create(:user).jobs.create valid_attributes
      expect { get :destroy, {id: other_job.to_param} }.to raise_error(CanCan::AccessDenied)
    end

    it "redirects to the @jobs list" do
      delete :destroy, {id: @job.to_param}, valid_session
      response.should redirect_to(jobs_url)
    end
  end

end
