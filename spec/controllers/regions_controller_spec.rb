require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe RegionsController do

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # RegionsController. Be sure to keep this updated too.

  before :each do
    @region = FactoryGirl.create :region
    request.accept = 'application/json'
    sign_in FactoryGirl.create :user
  end

  # This should return the minimal set of attributes required to create a valid
  # Region. As you add validations to Region, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { points: [{latitude: 1.5, longitude: 1.5}] } }

  describe "GET index" do
    it "assigns all regions as @regions" do
      get :index, {job_id: @region.job}
      assigns(:regions).should eq([@region])
    end
  end

  describe "GET show" do
    it "assigns the requested region as @region" do
      get :show, {job_id: @region.job, id: @region.to_param}
      assigns(:region).should eq(@region)
    end
  end


  describe "POST create" do
    describe "with valid params" do
      it "creates a new Region" do
        expect {
          post :create, {job_id: @region.job, region: valid_attributes}
        }.to change(Region, :count).by(1)
      end

      it "assigns a newly created region as @region" do
        post :create, {job_id: @region.job, region: valid_attributes}
        assigns(:region).should be_a(Region)
        assigns(:region).should be_persisted
        assigns(:region).points.should have(1).items
      end

    end

  end

  describe "PUT update" do
    describe "with valid params" do
      it "assigns the requested region as @region" do
        put :update, {job_id: @region.job, id: @region.to_param, region: valid_attributes}
        assigns(:region).should eq(@region)
      end

      it "should change points" do
        put :update, {job_id: @region.job, id: @region.to_param, region: {points: []}}
        assigns(:region).points.should have(0).items
      end
    end
  end



  describe "DELETE destroy" do
    it "destroys the requested region" do
      expect {
        delete :destroy, {job_id: @region.job, id: @region.to_param}
      }.to change(Region, :count).by(-1)
    end
  end

end
