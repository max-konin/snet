require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe StationsController do

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # stationsController. Be sure to keep this updated too.

  before :each do
    @station = FactoryGirl.create :station
    request.accept = 'application/json'
    sign_in FactoryGirl.create :user
  end

  # This should return the minimal set of attributes required to create a valid
  # station. As you add validations to station, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { latitude: 1.5, longitude: 1.5, name: 'mts' } }

  describe "GET index" do
    it "assigns all stations as @stations" do
      get :index, {job_id: @station.job_id}
      assigns(:stations).each.to_a.should eq([@station])
    end
  end

  describe "GET show" do
    it "assigns the requested station as @station" do
      get :show, {job_id: @station.job_id, id: @station.to_param}
      assigns(:station).should eq(@station)
    end
  end


  describe "POST create" do
    describe "with valid params" do
      it "creates a new station" do
        expect {
          post :create, {job_id: @station.job_id, station: valid_attributes}
        }.to change(Station, :count).by(1)
      end

      it "assigns a newly created station as @station" do
        post :create, {job_id: @station.job_id, station: valid_attributes}
        assigns(:station).should be_a(Station)
        assigns(:station).should be_persisted
      end

    end

  end


  describe "DELETE destroy" do
    it "destroys the requested station" do
      expect {
        delete :destroy, {job_id: @station.job_id, id: @station.to_param}
      }.to change(Station, :count).by(-1)
    end
  end

end
